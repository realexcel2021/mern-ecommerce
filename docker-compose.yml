version: "3.8"

networks:
  ecommerce-net:
    driver: bridge

volumes:
  database-vol:
  prometheus-vol:
  grafana-storage:

services:
  
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - 8081:80
    networks:
      - ecommerce-net

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - 3000:3000
    networks:
      - ecommerce-net

  database:
    image: mongo:latest
    container_name: mongodb
    networks:
      - ecommerce-net
    restart: always
    volumes:
      - database-vol:/data/db
    environment:  
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example


  prometheus:
    image: prom/prometheus:v2.37.9
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-vol:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    privileged: true
    volumes:
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    restart: always

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3001:3000'
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasource.yml

  

